#!/usr/bin/env python
'''Testing of NI-DM data model by comparing the prov file (converted to json) generated by SPM and the expected prov file (manually generated) for a set of experiments

@author: Camille Maumet <c.m.j.maumet@warwick.ac.uk>
@copyright: University of Warwick 2014
'''
import unittest
from prov.model import ProvBundle, ProvRecord, ProvExceptionCannotUnifyAttribute, graph, ProvEntity
import prov.model.graph
import os
from subprocess import call
import re
import logging
logger = logging.getLogger(__name__)

class TestSPMResultsDataModel(unittest.TestCase):

    def setUp(self):
        self.seq = range(10)
        # Display log messages
        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

    '''Test01: Analysis of single-subject auditory data based on test01_spm_batch.m using SPM12b r5918 
    '''
    def test_ex1_auditory_singlesub(self):
        # FIXME: Is this the right thing to do to get the test directory?
        test_dir = os.path.dirname(os.path.realpath('TestSPMResultsDataModel.py'))

        ground_truth_json = os.path.join(test_dir, 'spm', 'GroundTruth', 'test01', 'test01_spm_results.json');
        spm_export_json = os.path.join(test_dir, 'spm', 'SPMexport', 'test01', 'spm_nidm.json');

        file = open(ground_truth_json, 'r')
        ground_truth_prov = ProvBundle.from_provjson(file.read())

        file = open(spm_export_json, 'r')
        spm_export_prov = ProvBundle.from_provjson(file.read())

        # Compare record by record to know where the problem is if there is one...
        ground_truth_records = ground_truth_prov.get_records()
        struct_comparison = ''
        values_comparison = ''

        for gt_record in ground_truth_records:           
            gt_record_id = gt_record.get_identifier()
            if gt_record_id:

                # Find record in SPM export that correspond to the ground truth export
                se_record = spm_export_prov.get_record(gt_record_id)

                if se_record is None:

                    struct_comparison = struct_comparison+'Comparison failed: Record '+str(gt_record_id)+' is missing\n'
                else:
                    # Comparing attributes 1 by 1
                    ground_truth_attributes = gt_record.get_attributes()
                    
                    if ground_truth_attributes is not None:
                        for gt_attribute in ground_truth_attributes[1:]:
                            if gt_attribute is not None:
                                # logger.debug("gt_attribute:")
                                # logger.debug(gt_attribute)
                                for name, value in gt_attribute:
                                    if not se_record.get_attribute(name):
                                        struct_comparison = struct_comparison+'Comparison failed: Attribute %s of %s is missing.\n' % (name,gt_record.get_identifier())
                                    else:
                                        # Check attribute values
                                        if not value == se_record.get_attribute(name)[0]:
                                            # FIXME: Convert to numeric values to be able to check given a certain precision
                                            # FIXME: Deal with repeated attributes (ex prov:type)
                                            values_comparison = values_comparison+'Comparison failed: Attribute %s of %s has a wrong value (%s instead of %s)\n' % (name,gt_record.get_identifier(),se_record.get_attribute(name)[0],value)
                    # self.assertEqual(gt_record, se_record)#, 'Compa failed:  %s.' % str(gt_record.get_identifier()))
            
        # Compare relations
        ground_truth_relations = [record for record in ground_truth_records if record is not None and record.is_relation()]
        spm_export_relations = [record for record in spm_export_prov.get_records() if record is not None and record.is_relation()]
        
        # FIXME: This comes from the prov toolbox. Maybe we could instead modify the core prov code to return a detailed comparison message? (right now we will only get True or False and a single error message when comparing using ==). This would allow to use self.assertEqual instead.
        for record_a in ground_truth_relations:
            found = False

            for record_b in spm_export_relations:
                if record_a == record_b:
                    spm_export_relations.remove(record_b)
                    found = True
                    break
            if not found:
                struct_comparison = struct_comparison+"Comparison failed: Relation %s is missing. \n" % unicode(record_a)
                
        if struct_comparison+values_comparison:
            raise Exception(struct_comparison+'\n\n'+values_comparison)

        # If we had no error until now check using equality that manual and exported version are indeed equal
        self.assertEqual(g, spm_export_prov, 'Comparison failed:  %s.' % groundTruthFile)

if __name__ == '__main__':
    unittest.main()
